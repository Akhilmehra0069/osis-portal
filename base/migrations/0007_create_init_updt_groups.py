# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-08-11 12:53
from __future__ import unicode_literals
from django.core.management.sql import emit_post_migrate_signal

from django.db import migrations


def create_init_faculty_grp(apps, schema_editor):
    # create group
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(2, False, db_alias)
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    faculty_administrators_group, created = Group.objects.get_or_create(name='faculty_administrators')
    is_faculty_administrator = Permission.objects.get(codename='is_faculty_administrator')
    can_acces_administration = Permission.objects.get(codename='can_access_administration')

    if created:
        # Add permissions to group
        faculty_administrators_group.permissions.add(is_faculty_administrator)
        faculty_administrators_group.permissions.add(can_acces_administration)


def update_administrators_grp(apps, schema_editor):
    # create group
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(2, False, db_alias)
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    administrators_group = Group.objects.get(name='administrators')
    is_faculty_administrator = Permission.objects.get(codename='is_faculty_administrator')
    can_acces_administration = Permission.objects.get(codename='can_access_administration')

    administrators_group.permissions.add(is_faculty_administrator)
    administrators_group.permissions.add(can_acces_administration)


def update_authorisation_managers_grp(apps, schema_editor):
    # create group
    db_alias = schema_editor.connection.alias
    emit_post_migrate_signal(2, False, db_alias)
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    authorisation_managers_group = Group.objects.get(name='authorisations_managers')
    can_acces_administration = Permission.objects.get(codename='can_access_administration')

    authorisation_managers_group.permissions.add(can_acces_administration)


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0006_permissions_creation'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(create_init_faculty_grp),
        migrations.RunPython(update_administrators_grp),
        migrations.RunPython(update_authorisation_managers_grp),
    ]
